// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã
function checkAuthentication() {
    const telegramUser = localStorage.getItem('telegramUser');
    const firebaseUser = localStorage.getItem('firebaseUser');
    
    if (!telegramUser || !firebaseUser) {
        console.log('User not authenticated, redirecting to home...');
        window.location.href = '/';
        return false;
    }
    
    console.log('User authenticated:', JSON.parse(telegramUser).first_name);
    return true;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getCurrentUser() {
    try {
        const telegramUser = JSON.parse(localStorage.getItem('telegramUser'));
        const firebaseUser = JSON.parse(localStorage.getItem('firebaseUser'));
        const firebaseAuth = JSON.parse(localStorage.getItem('firebaseAuth'));
        
        return {
            telegram: telegramUser,
            firebase: firebaseUser,
            auth: firebaseAuth
        };
    } catch (error) {
        console.error('Error getting user data:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
function logout() {
    localStorage.removeItem('telegramUser');
    localStorage.removeItem('firebaseUser');
    localStorage.removeItem('firebaseAuth');
    window.location.href = '/';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function deleteAccount() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        if (typeof deleteCurrentUser === 'function') {
            deleteCurrentUser();
        } else {
            // Fallback –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            localStorage.removeItem('telegramUser');
            localStorage.removeItem('firebaseUser');
            localStorage.removeItem('firebaseAuth');
            alert('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ localStorage');
            window.location.href = '/';
        }
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º
function addAccountControls() {
    const user = getCurrentUser();
    if (!user) return;
    
    const controlsContainer = document.createElement('div');
    controlsContainer.style.position = 'fixed';
    controlsContainer.style.top = '10px';
    controlsContainer.style.right = '10px';
    controlsContainer.style.zIndex = '1000';
    controlsContainer.style.fontFamily = 'Arial, sans-serif';
    
    controlsContainer.innerHTML = `
        <div style="background: rgba(0,0,0,0.8); padding: 15px; border-radius: 8px; color: white; font-size: 14px; min-width: 200px;">
            <div style="margin-bottom: 10px; border-bottom: 1px solid #555; padding-bottom: 8px;">
                <strong>${user.telegram.first_name || 'User'}</strong>
                ${user.telegram.username ? `<br>@${user.telegram.username}` : ''}
                ${user.firebase ? `<br><small>ID: ${user.firebase.telegramId}</small>` : ''}
            </div>
            <button onclick="logout()" style="margin: 2px; padding: 8px 12px; background: #666; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%;">–í—ã–π—Ç–∏</button>
            <button onclick="deleteAccount()" style="margin: 2px; padding: 8px 12px; background: #ff4444; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%;">–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
        </div>
    `;
    
    document.body.appendChild(controlsContainer);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Firebase
function saveGameProgress(progressData) {
    const user = getCurrentUser();
    if (!user || !user.firebase) return;
    
    try {
        if (typeof firebase !== 'undefined') {
            firebase.database().ref('gameProgress/' + user.firebase.telegramId).set({
                ...progressData,
                updatedAt: firebase.database.ServerValue.TIMESTAMP
            });
            console.log('Game progress saved to Firebase');
        }
    } catch (error) {
        console.error('Error saving game progress:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ Firebase
async function loadGameProgress() {
    const user = getCurrentUser();
    if (!user || !user.firebase) return null;
    
    try {
        if (typeof firebase !== 'undefined') {
            const snapshot = await firebase.database().ref('gameProgress/' + user.firebase.telegramId).once('value');
            return snapshot.exists() ? snapshot.val() : null;
        }
    } catch (error) {
        console.error('Error loading game progress:', error);
    }
    
    return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!checkAuthentication()) {
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    addAccountControls();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const savedProgress = await loadGameProgress();
    if (savedProgress) {
        console.log('Loaded game progress:', savedProgress);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã
    }
    
    // –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–≥—Ä—ã –∑–¥–µ—Å—å...
    console.log('Game initialized for user:', getCurrentUser().telegram.first_name);
    
    // –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    // saveGameProgress({ level: 1, score: 1000 });
});

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.logout = logout;
window.deleteAccount = deleteAccount;

class Game {
    constructor() {
        this.timePatience = 100;
        this.codeFragments = 3;
        this.timeShards = 0;
        this.currentLocation = "–î–µ—Ä–µ–≤–Ω—è –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –£—Ç—Ä–∞";
        this.init();
    }

    init() {
        this.loadGameState();
        this.updateUI();
        this.startTimeLoop();
    }

    loadGameState() {
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
            const user = JSON.parse(savedUser);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
        }

        const gameState = localStorage.getItem('gameState');
        if (gameState) {
            const state = JSON.parse(gameState);
            this.timePatience = state.timePatience || 100;
            this.codeFragments = state.codeFragments || 3;
            this.timeShards = state.timeShards || 0;
        }
    }

    saveGameState() {
        const gameState = {
            timePatience: this.timePatience,
            codeFragments: this.codeFragments,
            timeShards: this.timeShards,
            currentLocation: this.currentLocation,
            lastSaved: new Date().toISOString()
        };
        localStorage.setItem('gameState', JSON.stringify(gameState));
    }

    updateUI() {
        document.getElementById('timePatience').textContent = this.timePatience;
        document.getElementById('codeFragments').textContent = this.codeFragments;
        document.getElementById('timeShards').textContent = this.timeShards;
        document.getElementById('inventoryFragments').textContent = this.codeFragments;
        document.getElementById('inventoryShards').textContent = this.timeShards;
    }

    startTimeLoop() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
        setInterval(() => {
            const particles = document.querySelector('.time-particles');
            particles.style.animation = 'particleFloat 20s infinite linear';
        }, 20000);
    }

    changeTimePatience(amount) {
        this.timePatience = Math.max(0, Math.min(100, this.timePatience + amount));
        this.updateUI();
        this.saveGameState();

        if (this.timePatience <= 0) {
            this.gameOver();
        }
    }

    useCodeFragment() {
        if (this.codeFragments > 0) {
            this.codeFragments--;
            this.changeTimePatience(10);
            this.showMessage('üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞! +10 –∫ —Ç–µ—Ä–ø–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏');
            this.updateUI();
            this.saveGameState();
        } else {
            this.showMessage('‚ùå –ù–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–æ–¥–∞!');
        }
    }

    gameOver() {
        this.showMessage('üíÄ –¢–µ—Ä–ø–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Å—è–∫–ª–æ! –ú–∏—Ä –ø–æ–≥–ª–æ—â–µ–Ω —Ö–∞–æ—Å–æ–º...', true);
        setTimeout(() => {
            if (confirm('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) {
                this.resetGame();
            }
        }, 2000);
    }

    resetGame() {
        this.timePatience = 100;
        this.codeFragments = 3;
        this.timeShards = 0;
        this.updateUI();
        this.saveGameState();
        this.showMessage('üåÄ –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!');
    }

    showMessage(text, isError = false) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = document.createElement('div');
        message.className = `message ${isError ? 'error' : 'success'}`;
        message.textContent = text;
        message.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(26, 26, 58, 0.95);
            padding: 1rem 2rem;
            border-radius: 10px;
            border: 2px solid ${isError ? 'var(--error)' : 'var(--success)'};
            z-index: 1001;
            font-size: 1.1rem;
            animation: fadeInOut 3s ease-in-out;
        `;

        document.body.appendChild(message);

        setTimeout(() => {
            message.remove();
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
const game = new Game();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
function showPuzzle() {
    document.getElementById('actionButtons').classList.add('hidden');
    document.getElementById('puzzleSection').classList.remove('hidden');
}

function hidePuzzle() {
    document.getElementById('actionButtons').classList.remove('hidden');
    document.getElementById('puzzleSection').classList.add('hidden');
}

function checkAnswer(answer) {
    const correctAnswer = '!anvilIsHot';
    
    if (answer === correctAnswer) {
        game.showMessage('‚úÖ –í–µ—Ä–Ω–æ! –í—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è!');
        game.changeTimePatience(20);
        game.timeShards += 1;
        game.updateUI();
        game.saveGameState();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
        document.getElementById('dialogueText').textContent = 
            '–û—Ç–ª–∏—á–Ω–æ! –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –ö—É–∑–Ω–µ—Ü –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —É–¥–∞—Ä–∏–ª –ø–æ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ. ' +
            '–í—Ä–µ–º—è –≤ –¥–µ—Ä–µ–≤–Ω–µ –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥. ' +
            '–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –û—Å–∫–æ–ª–æ–∫ –í—Ä–µ–º–µ–Ω–∏!';
        
        setTimeout(hidePuzzle, 3000);
    } else {
        game.showMessage('‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –¢–µ—Ä–ø–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.', true);
        game.changeTimePatience(-10);
        hidePuzzle();
    }
}

function talkToCharacter() {
    game.showMessage('üó£Ô∏è –ö—É–∑–Ω–µ—Ü: "–Ø... —è –Ω–µ –º–æ–≥—É –¥–≤–∏–≥–∞—Ç—å—Å—è... –∫–æ–¥... —Å–ª–æ–º–∞–Ω..."');
}

function useCodeFragment() {
    game.useCodeFragment();
}

function toggleInventory() {
    document.getElementById('inventoryModal').classList.toggle('hidden');
}

function showMap() {
    document.getElementById('mapModal').classList.toggle('hidden');
}

function showHint() {
    game.showMessage('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π –ª–æ–≥–∏—á–µ—Å–∫–æ–µ "–ù–ï" –¥–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è false');
}

function showMenu() {
    if (confirm('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω?')) {
        window.location.href = 'index.html';
    }
}

function closeModals() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.classList.add('hidden');
    });
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeInOut {
        0% { opacity: 0; transform: translate(-50%, -40%); }
        20% { opacity: 1; transform: translate(-50%, -50%); }
        80% { opacity: 1; transform: translate(-50%, -50%); }
        100% { opacity: 0; transform: translate(-50%, -60%); }
    }
`;
document.head.appendChild(style);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        closeModals();
    }
});