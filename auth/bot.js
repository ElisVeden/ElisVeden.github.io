// bot.js
// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyByYAiN67kGW9K1X6LDVBlyDS99OziZ1n8",
  authDomain: "endless-food-6a3d9.firebaseapp.com",
  databaseURL: "https://endless-food-6a3d9-default-rtdb.firebaseio.com",
  projectId: "endless-food-6a3d9",
  storageBucket: "endless-food-6a3d9.firebasestorage.app",
  messagingSenderId: "90845090114",
  appId: "1:90845090114:web:9963538d2a7033706d38db",
  measurementId: "G-CYJEX9EVKR"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app, auth, database;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
function initializeFirebase() {
  if (typeof firebase !== 'undefined') {
    app = firebase.initializeApp(firebaseConfig);
    auth = firebase.auth();
    database = firebase.database();
    return true;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
async function createFirebaseUser(telegramUser) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!app && !initializeFirebase()) {
      throw new Error('Firebase not available');
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID
    const email = `telegram_${telegramUser.id}@telegram.com`;
    const password = generateRandomPassword(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Auth
    const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
    const firebaseUser = userCredential.user;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Realtime Database
    await firebase.database().ref('users/' + telegramUser.id).set({
      telegramId: telegramUser.id,
      firstName: telegramUser.first_name,
      lastName: telegramUser.last_name || '',
      username: telegramUser.username || '',
      firebaseUid: firebaseUser.uid,
      createdAt: new Date().toISOString()
    });

    return firebaseUser;
  } catch (error) {
    console.error('Error creating Firebase user:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
async function findUserByTelegramId(telegramId) {
  try {
    if (!app && !initializeFirebase()) {
      throw new Error('Firebase not available');
    }

    const snapshot = await firebase.database().ref('users/' + telegramId).once('value');
    return snapshot.exists() ? snapshot.val() : null;
  } catch (error) {
    console.error('Error finding user:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUserAccount(telegramId) {
  try {
    if (!app && !initializeFirebase()) {
      throw new Error('Firebase not available');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const userData = await findUserByTelegramId(telegramId);

    if (!userData) {
      throw new Error('User not found');
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ Firebase Auth
    const currentUser = firebase.auth().currentUser;
    if (currentUser && currentUser.uid === userData.firebaseUid) {
      await currentUser.delete();
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await firebase.database().ref('users/' + telegramId).remove();

    return true;
  } catch (error) {
    console.error('Error deleting user:', error);
    throw error;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
function generateRandomPassword() {
  return Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-8);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
window.handleTelegramAuth = async function (user) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let userData = await findUserByTelegramId(user.id);

    if (!userData) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await createFirebaseUser(user);
      userData = await findUserByTelegramId(user.id);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
    localStorage.setItem('telegramUser', JSON.stringify(user));
    localStorage.setItem('firebaseUser', JSON.stringify(userData));

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.href = '/game/game.html';

  } catch (error) {
    console.error('Authentication error:', error);
    alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.deleteCurrentUser = async function () {
  try {
    const telegramUser = JSON.parse(localStorage.getItem('telegramUser'));

    if (!telegramUser || !telegramUser.id) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
      return;
    }

    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      await deleteUserAccount(telegramUser.id);

      // –û—á–∏—â–∞–µ–º localStorage
      localStorage.removeItem('telegramUser');
      localStorage.removeItem('firebaseUser');

      alert('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      window.location.href = '/';
    }
  } catch (error) {
    console.error('Error deleting account:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ' + error.message);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.checkAuth = function () {
  const telegramUser = localStorage.getItem('telegramUser');
  const firebaseUser = localStorage.getItem('firebaseUser');

  return !!(telegramUser && firebaseUser);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
window.getCurrentUser = function () {
  try {
    const telegramUser = JSON.parse(localStorage.getItem('telegramUser'));
    const firebaseUser = JSON.parse(localStorage.getItem('firebaseUser'));

    return {
      telegram: telegramUser,
      firebase: firebaseUser
    };
  } catch (error) {
    return null;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function () {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º Firebase SDK –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (typeof firebase === 'undefined') {
    const script = document.createElement('script');
    script.src = "https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js";
    script.onload = function () {
      const authScript = document.createElement('script');
      authScript.src = "https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js";
      authScript.onload = function () {
        const databaseScript = document.createElement('script');
        databaseScript.src = "https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js";
        document.head.appendChild(databaseScript);
      };
      document.head.appendChild(authScript);
    };
    document.head.appendChild(script);
  }
});


const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather
const BOT_TOKEN = '8375839041:AAHMcQN6JrM96Ulq7QhzMUogPOL8w6L3DwY';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–º–µ—Å—Ç–æ Firebase)
const USERS_FILE = path.join(__dirname, 'users.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
  try {
    if (fs.existsSync(USERS_FILE)) {
      const data = fs.readFileSync(USERS_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
  return {};
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function saveUsers(users) {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;

  console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = loadUsers();

  if (users[user.id]) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await bot.sendMessage(chatId,
      `üéÆ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.first_name}!\n\n` +
      `–í–∞—à ID: ${user.id}\n` +
      `–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /progress –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞`
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    users[user.id].lastLogin = new Date().toISOString();
  } else {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users[user.id] = {
      id: user.id,
      firstName: user.first_name,
      lastName: user.last_name || '',
      username: user.username,
      registeredAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
      progress: {
        level: 1,
        completedPuzzles: [],
        timePatience: 100,
        currentLocation: 'start_village'
      },
      inventory: {
        codeFragments: 3,
        timeShards: 0
      }
    };

    await bot.sendMessage(chatId,
      `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†—É–Ω–Ω—ã–π –°–ª–µ–¥–æ–ø—ã—Ç, ${user.first_name}!\n\n` +
      `–í—ã —Å—Ç–∞–ª–∏ –°–ª–µ–¥–æ–ø—ã—Ç–æ–º –†—É–Ω–Ω–æ–≥–æ –ö–æ–¥–∞!\n` +
      `–í–∞—à ID: ${user.id}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Widget.\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /progress –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞`
    );
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  saveUsers(users);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress
bot.onText(/\/progress/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const users = loadUsers();
  const user = users[userId];

  if (user) {
    const progress = user.progress;
    const inventory = user.inventory;

    await bot.sendMessage(chatId,
      `üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, ${user.firstName}:\n\n` +
      `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${progress.level}\n` +
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫: ${progress.completedPuzzles.length}\n` +
      `üíé –§—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞: ${inventory.codeFragments}\n` +
      `‚è≥ –¢–µ—Ä–ø–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: ${progress.timePatience}\n` +
      `üìç –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: ${progress.currentLocation}\n\n` +
      `üïê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date(user.registeredAt).toLocaleDateString('ru-RU')}`
    );
  } else {
    await bot.sendMessage(chatId,
      '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;

  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º
  const ADMIN_ID = '@code_weaver_gamebot';

  if (msg.from.id.toString() !== ADMIN_ID) {
    await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    return;
  }

  const users = loadUsers();
  const totalUsers = Object.keys(users).length;

  await bot.sendMessage(chatId,
    `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n` +
    `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
    `üÜï –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${getNewUsersToday(users)}\n` +
    `üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: ${getActiveUsers(users)}`
  );
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getNewUsersToday(users) {
  const today = new Date().toDateString();
  return Object.values(users).filter(user =>
    new Date(user.registeredAt).toDateString() === today
  ).length;
}

function getActiveUsers(users) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  return Object.values(users).filter(user =>
    new Date(user.lastLogin) > yesterday
  ).length;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

bot.on('webhook_error', (error) => {
  console.error('Webhook error:', error);
});

console.log('ü§ñ –ë–æ—Ç –†—É–Ω–Ω—ã–π –°–ª–µ–¥–æ–ø—ã—Ç –∑–∞–ø—É—â–µ–Ω...');
console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');